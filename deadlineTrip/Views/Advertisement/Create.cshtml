
@model AdsListViewModel



<form asp-controller="Advertisement" asp-action="SubmitCreateAction" method="post">
    <div class="container">
        <div class="row">
            <div class="col-sm-12 col-md-10 col-md-offset-1">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div id="sectionHeading">
                    <div class="form-group" hidden>
                        <label asp-for="Advertisements.CardId" class="control-label"></label>
                        <input asp-for="Advertisements.CardId" id="cardid" class="form-control" value="" />
                    </div>

                    <div class="md-form">
                        <label asp-for="Cards.Name">Type the card you want to sell</label>
                        <input asp-for="Cards.Name" autocomplete="off" id="cardInput" type="text" class="form-control" />
                        <span asp-validation-for="Cards.Name" class="text-danger"></span>
                    </div>

                    <div id="rarityWrapper" hidden>
                        <div class="md-form">
                            <select class="custom-select custom-select-sm" asp-for="Cards.Retumas">
                                <option value="" disabled selected>Choose your card's rarity</option>
                            </select>
                        </div>
                    </div>
             </div>


            <div id="sectionForm"  hidden>

                <div class="row flex-center">

                    <div class="col-lg-6 col-md-8">

                        <h4 class="py-lg-4 pb-4 text-center">Card Information</h4>

                        <!--Card-->
                        <div class="card card-cascade d-flex flex-row ">

                            <!--Card image-->
                            <div class="view view-cascade">

                            </div>
                            <!--/.Card image-->
                            <!--Card content-->
                            <div class="card-body card-body-cascade text-center ">



                            </div>


                        </div>
                        <div class="md-form">
                            <label asp-for="Advertisements.Price" class="control-label"></label>
                            <input asp-for="Advertisements.Price" class="form-control" />
                            <span asp-validation-for="Advertisements.Price" class="text-danger"></span>
                        </div>
                        <div class="md-form">
                            <label asp-for="Advertisements.Quantity" class="control-label"></label>
                            <input asp-for="Advertisements.Quantity" class="form-control" />
                            <span asp-validation-for="Advertisements.Quantity" class="text-danger"></span>
                        </div>
                        <div class="flex-center">
                            <button type="submit" class="btn btn-primary" >Confirm</button>
                         </div>
                                <!--/.Card-->

                            </div>
                        </div>


            </div>
  
                
            </div>
            </div>
</div>
</form>



<script>
    var xmlhttp;
    var cardNames
    var cards;
    if (window.ActiveXObject) {
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    } else {
        xmlhttp = new XMLHttpRequest();
    }
    xmlhttp.open("POST", "/Card/AjaxGetCards", true);
    xmlhttp.onreadystatechange = function () {
        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
            cards = JSON.parse(xmlhttp.responseText);
            cardNames = cards.map(a => a.name);
            autocomplete(document.getElementById("cardInput"), cardNames);
        }
    }
    xmlhttp.send();


    document.getElementById("Cards_Retumas").addEventListener('change', (event) => {
        populateForm();
        unhideSectionForm();
        hideHeadingForm();
        
    });


    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                         unhideRarity()
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                    
                }
            }


        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function bindValue() {
            var cardInput = document.getElementById("cardInput")
            var matchedCards = cards.filter(x => x.name == cardInput.value);
            var matchedRarities = matchedCards.map(a => a.retumas);

            if (matchedCards != null) {
                populateRarities(matchedRarities);
            }

        }

        function deleteChilds(list) {
            while (list.hasChildNodes()) {
                list.removeChild(list.firstChild);
            }
        }
        function initRarityDropDown(rarityField) {
            deleteChilds(rarityField);
            option = document.createElement("OPTION");
            option.text = "Choose your card's rarity";
            option.value = "";
            option.setAttribute("disabled", "");
            option.setAttribute("selected", "");
            rarityField.appendChild(option);
        }
        function populateRarities(matchedRarities) {
            rarityField = document.getElementById("Cards_Retumas");

            initRarityDropDown(rarityField)
            for (i = 0; i < matchedRarities.length; i++) {
                option = document.createElement("OPTION");
                option.text = matchedRarities[i];
                option.value = matchedRarities[i];
                rarityField.appendChild(option);

            }
            

        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }

            bindValue()
           


        }

    }
    function createImageForCard(targetImage) {
        // <div class="view view-cascade">
        var parentDiv = document.getElementsByClassName("view-cascade")[0];
        var img = document.createElement('img');
        img.setAttribute("src", targetImage);
        img.style.maxHeight = "300px";
        img.style.maxWidth ="300px"
        img.classList.add("card-img-top");
        parentDiv.appendChild(img);
        
    }

    function createCardBody(cardName, rarity, level, attack, defense) {
        var parentDiv = document.getElementsByClassName("card-body")[0];
        var cardNameElement = document.createElement('h4');
        var strongElement = document.createElement('strong');
        var text = document.createTextNode(cardName);
        strongElement.appendChild(text);
        cardNameElement.appendChild(strongElement);
        parentDiv.appendChild(cardNameElement);

        var cardRarityElement = document.createElement('h4');
        var text = document.createTextNode(rarity);
        cardRarityElement.appendChild(text);
        parentDiv.appendChild(cardRarityElement);

         var cardLevelElement = document.createElement('p');
        var text = document.createTextNode("Level: " + level);
        cardLevelElement.appendChild(text);
        parentDiv.appendChild(cardLevelElement);

         var cardAttackElement = document.createElement('p');
        var text = document.createTextNode("Attack: " + level);
        cardAttackElement.appendChild(text);
        parentDiv.appendChild(cardAttackElement);

        var cardDefenseElement = document.createElement('p');
        var text = document.createTextNode("Defense: " + level);
        cardDefenseElement.appendChild(text);
        parentDiv.appendChild(cardDefenseElement);

    }
    function populateForm() {
        var cardInput = document.getElementById("cardInput")
        var rarityField = document.getElementById("Cards_Retumas");
        var cardId = document.getElementById("cardid");
        var compareToRarity;
        if (rarityField.value == "null") {
            compareToRarity = null
        }
        else {
            compareToRarity = rarityField.value
        }
        var selectedCard = cards.find(x => x.retumas == compareToRarity && x.name == cardInput.value);

        createImageForCard(selectedCard.image)
        createCardBody(selectedCard.name, selectedCard.rarity, selectedCard.level, selectedCard.attack, selectedCard.defense)
        cardId.value = selectedCard.id;

    }

    function unhideRarity() {
        var section = document.getElementById("rarityWrapper");
        section.removeAttribute("hidden");
    }

    function unhideSectionForm() {
        var section = document.getElementById("sectionForm");
        section.removeAttribute("hidden");
    }
    function hideHeadingForm() {     
        var section = document.getElementById("sectionHeading");
        section.hidden = true;
    }




</script>



